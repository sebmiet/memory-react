{"version":3,"sources":["components/Card.js","components/Images.js","images/armor.png","images/axe.png","images/backpack.png","images/bow.png","images/coin.png","images/envelope.png","images/gemBlue.png","images/gemGreen.png","images/gemRed.png","images/shield.png","images/sword.png","images/tome.png","sounds/card-flip.wav","sounds/ping.wav","sounds/win.wav","sounds/shuffle.wav","components/Cards.js","components/GameInfo.js","components/App.js","index.js"],"names":["Card","image","id","active","handleClick","memorySuccess","cardAnimation","initial","x","scale","opacity","animate","rotate","transition","delay","duration","className","motion","div","variants","onClick","whileHover","whileTap","src","alt","Images","Cards","setCounter","setSuccess","setWin","useState","activeCards","setActiveCards","images","setImages","Array","map","card","index","cards","setCards","useSound","cardFlip","play","ping","playPing","win","playWin","shuffle","useEffect","imagesDraw","checkActiveCards","console","log","newImages","length","Math","floor","random","push","splice","drawedImages","concat","sort","newCards","newActiveCards","filter","checkForWin","setTimeout","cardsArray","activeCardsIndex","updatedCards","preValue","checkImages","GameInfo","counter","success","messagesSucces","h1","style","translateX","handleSuccess","translateY","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e851f4f.chunk.js","sourcesContent":["import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Card = ({ image, id, active, handleClick, memorySuccess }) => {\n  const cardAnimation = {\n    initial: {\n      x: \"100vw\",\n      scale: 10,\n      opacity: 0.5,\n    },\n    animate: {\n      x: 0,\n      scale: 1,\n      opacity: 1,\n      rotate: [-120, -90, -70, -10, 0],\n      transition: {\n        delay: id * 0.1,\n        duration: 0.5,\n      },\n    },\n  };\n  return !memorySuccess ? (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={cardAnimation}\n      id={id}\n      className={!active ? \"card\" : \"card-active\"}\n      onClick={() => handleClick(id)}\n    >\n      <div className=\"card-inner\">\n        <motion.div\n          whileHover={{\n            scale: 1.05,\n          }}\n          whileTap={{\n            scale: 0.95,\n          }}\n          transition={{\n            duration: 0.2,\n          }}\n          className=\"card-front\"\n        ></motion.div>\n        <div className=\"card-back\">\n          <img src={image} alt=\"img\" />\n        </div>\n      </div>\n    </motion.div>\n  ) : (\n    <div className=\"card-success\"></div>\n  );\n};\nexport default Card;\n","import armor from \"../images/armor.png\";\nimport axe from \"../images/axe.png\";\nimport backpack from \"../images/backpack.png\";\nimport bow from \"../images/bow.png\";\nimport coin from \"../images/coin.png\";\nimport envelope from \"../images/envelope.png\";\nimport gemBlue from \"../images/gemBlue.png\";\nimport gemGreen from \"../images/gemGreen.png\";\nimport gemRed from \"../images/gemRed.png\";\nimport shield from \"../images/shield.png\";\nimport sword from \"../images/sword.png\";\nimport tome from \"../images/tome.png\";\n\nconst Images = [\n  armor,\n  axe,\n  backpack,\n  bow,\n  coin,\n  envelope,\n  gemBlue,\n  gemGreen,\n  gemRed,\n  shield,\n  sword,\n  tome,\n];\n\nexport default Images;\n","export default __webpack_public_path__ + \"static/media/armor.d79f4964.png\";","export default __webpack_public_path__ + \"static/media/axe.221677d7.png\";","export default __webpack_public_path__ + \"static/media/backpack.ea81c2aa.png\";","export default __webpack_public_path__ + \"static/media/bow.2baca04e.png\";","export default __webpack_public_path__ + \"static/media/coin.1bfa1905.png\";","export default __webpack_public_path__ + \"static/media/envelope.4d5b921b.png\";","export default __webpack_public_path__ + \"static/media/gemBlue.090ad571.png\";","export default __webpack_public_path__ + \"static/media/gemGreen.c83b2ab7.png\";","export default __webpack_public_path__ + \"static/media/gemRed.c51a6a03.png\";","export default __webpack_public_path__ + \"static/media/shield.ebbaeb88.png\";","export default __webpack_public_path__ + \"static/media/sword.f0d4c1af.png\";","export default __webpack_public_path__ + \"static/media/tome.70a1f06d.png\";","export default __webpack_public_path__ + \"static/media/card-flip.483663ca.wav\";","export default __webpack_public_path__ + \"static/media/ping.d72ff651.wav\";","export default __webpack_public_path__ + \"static/media/win.f0241501.wav\";","export default __webpack_public_path__ + \"static/media/shuffle.475a382d.wav\";","import React, { useState, useEffect } from \"react\";\nimport useSound from \"use-sound\";\n\nimport Card from \"./Card\";\nimport Images from \"./Images\";\nimport cardFlip from \"../sounds/card-flip.wav\";\nimport ping from \"../sounds/ping.wav\";\nimport win from \"../sounds/win.wav\";\nimport shuffle from \"../sounds/shuffle.wav\";\n\nconst Cards = ({ setCounter, setSuccess, setWin }) => {\n  const [activeCards, setActiveCards] = useState([]);\n  const [images, setImages] = useState([]);\n  const [cards, setCards] = useState(\n    [...Array(12)].map((card, index) => {\n      card = {\n        id: index,\n        active: false,\n        memorySuccess: false,\n      };\n      return card;\n    })\n  );\n  const [play] = useSound(cardFlip);\n  const [playPing] = useSound(ping);\n  const [playWin] = useSound(win);\n  const [playStart] = useSound(shuffle);\n\n  useEffect(() => {\n    imagesDraw(Images);\n  }, []);\n\n  useEffect(() => {\n    checkActiveCards(activeCards);\n  }, [activeCards, cards]);\n\n  const imagesDraw = (images) => {\n    console.log(images);\n    let newImages = [];\n    while (newImages.length < cards.length / 2) {\n      let index = Math.floor(Math.random() * images.length);\n      newImages.push(images[index]);\n      images.splice(index, 1);\n    }\n    let pairImages = [...newImages];\n    newImages = pairImages.concat(newImages);\n    let drawedImages = newImages.sort(() => 0.5 - Math.random());\n\n    console.log(drawedImages);\n    setImages(drawedImages);\n  };\n\n  const handleClick = (id) => {\n    if (activeCards.length === 2) return;\n    play(cardFlip);\n    const newCards = cards.map((card) => {\n      if (card.id === id) card.active = true;\n      return card;\n    });\n    setCards(newCards);\n    setSuccess(false);\n    const newActiveCards = newCards.filter((card) => card.active === true);\n    setActiveCards(newActiveCards);\n  };\n\n  const checkImages = (cardsArray) => {\n    let activeCards = [];\n    let activeCardsIndex = [];\n    const updatedCards = [...cardsArray].map((card, index) => {\n      if (card.active === true) {\n        activeCards.push(card);\n        activeCardsIndex.push(index);\n        console.log(activeCards);\n        if (activeCards.length === 2) {\n          const image1 = images[activeCardsIndex[0]];\n          const image2 = images[activeCardsIndex[1]];\n          if (image1 === image2) {\n            activeCards[0].memorySuccess = true;\n            activeCards[1].memorySuccess = true;\n            playPing();\n            setSuccess(true);\n          }\n          activeCards[0].active = false;\n          activeCards[1].active = false;\n          setCounter((preValue) => preValue + 1);\n        }\n      }\n      return card;\n    });\n    setActiveCards([]);\n    setCards(updatedCards);\n    checkForWin(updatedCards);\n  };\n\n  const checkForWin = (cards) => {\n    let newCards = cards.filter((card) => card.memorySuccess === false);\n    if (newCards.length === 0) {\n      setWin(true);\n      playWin();\n    }\n  };\n\n  const checkActiveCards = (activeCards) => {\n    if (activeCards.length > 1) {\n      setTimeout(() => {\n        checkImages(cards);\n      }, 1000);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"cards-container\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={card.id}\n              id={card.id}\n              image={images[index]}\n              active={card.active}\n              handleClick={handleClick}\n              memorySuccess={card.memorySuccess}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst GameInfo = ({ counter, success, win }) => {\n  const messagesSucces = [\n    \"BRAWO!\",\n    \"DOSKONALE!\",\n    \"TAK TRZYMAJ!\",\n    \"TAAAK!\",\n    \"TAK JEST!\",\n  ];\n\n  const handleSuccess = () => {\n    const index = Math.floor(Math.random() * messagesSucces.length);\n    return (\n      <motion.h1\n        animate={{\n          scale: [1.2, 1, 1.2, 1, 1.2],\n        }}\n        transition={{\n          duration: 1,\n        }}\n        style={{ translateX: \"-50%\" }}\n        className=\"success-msg\"\n      >\n        {messagesSucces[index]}\n      </motion.h1>\n    );\n  };\n\n  const handleWin = () => {\n    return (\n      <motion.h1\n        animate={{\n          scale: [1.6, 1, 1.6, 1, 1.6],\n        }}\n        transition={{\n          duration: 3,\n        }}\n        style={{ translateY: \"-50%\", translateX: \"-50%\" }}\n        className=\"win-msg\"\n      >\n        WYGRAŁEŚ!!!\n      </motion.h1>\n    );\n  };\n\n  return (\n    <div className=\"game-info-container\">\n      <h2>Wykonane ruchy : {counter}</h2>\n      {success && handleSuccess()}\n      {win && handleWin()}\n    </div>\n  );\n};\n\nexport default GameInfo;\n","import { useState } from \"react\";\nimport Cards from \"./Cards\";\nimport GameInfo from \"./GameInfo\";\n\nfunction App() {\n  const [counter, setCounter] = useState(0);\n  const [success, setSuccess] = useState(false);\n  const [win, setWin] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <Cards setCounter={setCounter} setSuccess={setSuccess} setWin={setWin} />\n      <GameInfo counter={counter} success={success} win={win} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}